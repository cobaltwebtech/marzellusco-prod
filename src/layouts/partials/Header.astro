---
import Logo from "@/components/Logo.astro";
import menu from "@/config/menu.json";
import config from "@/config/config.json";
import ThemeSwitcher from "@/components/ThemeSwitcher.astro";
import SearchBar from "@/functional-components/SearchBar";
import Cart from "@/components/Cart.astro";

const { navigation_button, settings } = config;

// determine if a menu item is active
const isMenuItemActive = (url: string) => {
  const pathname = Astro.url.pathname;
  if (url === "/") {
    return pathname === url ? "active" : "";
  }
  return pathname.startsWith(url) ? "active" : "";
};

// determine if any child is active
const isParentActive = (children: any[]) => {
  return children.some((child) => isMenuItemActive(child.url));
};
---

<header
  class:list={[
    "header z-30",
    settings.sticky_header && "sticky top-0",
    "transition-shadow duration-300",
  ]}
>
  <nav class="navbar container flex-wrap">
    <div
      class="order-1 flex items-center justify-between space-x-7 lg:space-x-14"
    >
      <Logo />

      <div class="relative z-40 hidden md:block">
        <label
          for="nav-toggle"
          class="text-dark order-3 flex cursor-pointer items-center lg:order-1 dark:text-white"
        >
          <span class="mr-2 font-medium">Menu</span>
          <button id="nav-toggle" class="focus:outline-none">
            <svg class="menu-open block h-3 fill-current" viewBox="0 0 20 20">
              <title>Menu Open</title>
              <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
            </svg>
            <svg class="menu-close hidden h-3 fill-current" viewBox="0 0 20 20">
              <title>Menu Close</title>
              <polygon
                points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
                transform="rotate(45 10 10)"></polygon>
            </svg>
          </button>
        </label>

        <div
          class="overlay fixed top-0 left-0 hidden h-full w-full bg-black opacity-50"
        >
        </div>

        <div
          class="sidebar dark:bg-darkmode-body fixed top-0 left-0 h-full w-full -translate-x-full transform overflow-y-auto bg-white p-9 transition-transform md:w-96"
        >
          <div class="mb-14 flex items-center justify-between">
            <Logo />
            <button class="close-sidebar p-2">
              <svg class="block h-5 fill-current" viewBox="0 0 20 20">
                <title>Menu Close</title>
                <polygon
                  points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
                  transform="rotate(45 10 10)"></polygon>
              </svg>
            </button>
          </div>
          <ul class="nav-list">
            {
              menu.main.map((menuItem) => (
                <li
                  class:list={[
                    "nav-item",
                    menuItem.hasChildren && "has-children",
                  ]}
                >
                  {menuItem.hasChildren ? (
                    <>
                      <button
                        class:list={[
                          "nav-link flex w-full items-center justify-between",
                          "px-3 py-2",
                          isParentActive(menuItem.children) &&
                            "text-primary font-medium",
                        ]}
                        data-submenu-toggle
                      >
                        {menuItem.name}
                        <svg
                          class="submenu-arrow h-4 w-4 transition-transform"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M6 9L12 15L18 9"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>

                      <ul class="submenu dark:bg-dark mt-2 hidden space-y-2 rounded-md bg-white py-4 pl-4 shadow">
                        {menuItem.children.map((child) => (
                          <li>
                            <a
                              href={child.url}
                              class:list={[
                                "nav-dropdown-link block",
                                "px-3 py-2",
                                isMenuItemActive(child.url) &&
                                  "text-primary font-medium",
                              ]}
                            >
                              {child.name}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </>
                  ) : (
                    <a
                      href={menuItem.url}
                      class:list={[
                        "nav-link block",
                        "rounded-lg px-3 py-2 transition-colors",
                        isMenuItemActive(menuItem.url) && "italic",
                      ]}
                    >
                      {menuItem.name}
                    </a>
                  )}
                </li>
              ))
            }

            {
              navigation_button.enable && (
                <li class="mt-4 mr-4 inline-block md:mr-6">
                  <a
                    class="btn btn-outline-primary btn-sm"
                    href={navigation_button.link}
                  >
                    {navigation_button.label}
                  </a>
                </li>
              )
            }
          </ul>
        </div>
      </div>
    </div>

    <div class="order-3 w-full max-lg:mt-6 lg:order-2 lg:w-[45%] xl:w-[60%]">
      {settings.search && <SearchBar client:load />}
    </div>

    <div class="order-2 ml-auto flex items-center lg:order-3 lg:ml-0">
      <ThemeSwitcher className="mr-4 md:mr-6" />
      <Cart />

      <div class="relative z-40 ml-6 block md:hidden">
        {/* Mobile menu toggle button */}
        <label
          for="nav-toggle-mobile"
          class="text-dark border-border dark:border-darkmode-border flex cursor-pointer items-center rounded-md border p-1 dark:text-white"
        >
          <button id="nav-toggle-mobile" class="focus:outline-none">
            <svg class="menu-open block h-5 fill-current" viewBox="0 0 20 20">
              <title>Menu Open</title>
              <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
            </svg>
            <svg class="menu-close hidden h-5 fill-current" viewBox="0 0 20 20">
              <title>Menu Close</title>
              <polygon
                points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
                transform="rotate(45 10 10)"></polygon>
            </svg>
          </button>
        </label>

        {/* Mobile menu sidebar */}
        <div
          class="overlay fixed top-0 left-0 hidden h-full w-full bg-black opacity-50"
        >
        </div>
        <div
          class="sidebar-mobile dark:bg-darkmode-body fixed top-0 left-0 h-full w-full -translate-x-full transform overflow-y-auto bg-white p-9 transition-transform md:w-96"
        >
          {/* Same navigation list as desktop but for mobile */}
          <div class="mb-14 flex items-center justify-between">
            <Logo />
            <button class="close-sidebar-mobile p-2">
              <svg class="block h-5 fill-current" viewBox="0 0 20 20">
                <title>Menu Close</title>
                <polygon
                  points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
                  transform="rotate(45 10 10)"></polygon>
              </svg>
            </button>
          </div>
          <ul class="nav-list">
            {
              menu.main.map((menuItem) => (
                <li
                  class:list={[
                    "nav-item",
                    menuItem.hasChildren && "has-children",
                  ]}
                >
                  {menuItem.hasChildren ? (
                    <>
                      <button
                        class:list={[
                          "nav-link flex w-full items-center justify-between",
                          "rounded-lg px-3 py-2 transition-colors",
                          isParentActive(menuItem.children) &&
                            "text-primary font-medium",
                        ]}
                        data-submenu-toggle
                      >
                        {menuItem.name}
                        <svg
                          class="submenu-arrow h-4 w-4 transition-transform"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M6 9L12 15L18 9"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                      <ul class="submenu dark:bg-dark mt-2 hidden space-y-2 rounded-md bg-white py-4 pl-4 shadow">
                        {menuItem.children.map((child) => (
                          <li>
                            <a
                              href={child.url}
                              class:list={[
                                "nav-dropdown-link block",
                                "rounded-lg px-3 py-2 transition-colors",
                                isMenuItemActive(child.url) &&
                                  "text-primary font-medium",
                              ]}
                            >
                              {child.name}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </>
                  ) : (
                    <a
                      href={menuItem.url}
                      class:list={[
                        "nav-link block",
                        "px-3rounded-lg py-2 transition-colors",
                        isMenuItemActive(menuItem.url) && "italic",
                      ]}
                    >
                      {menuItem.name}
                    </a>
                  )}
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  function initializeHeader() {
    const header = document.querySelector("header");
    const navToggle = document.querySelector("#nav-toggle");
    const navToggleMobile = document.querySelector("#nav-toggle-mobile");
    const sidebar = document.querySelector(".sidebar");
    const sidebarMobile = document.querySelector(".sidebar-mobile");
    const overlay = document.querySelector(".overlay");
    const closeButton = document.querySelector(".close-sidebar");
    const closeButtonMobile = document.querySelector(".close-sidebar-mobile");
    const menuOpenIcons = document.querySelectorAll(".menu-open");
    const menuCloseIcons = document.querySelectorAll(".menu-close");
    const submenuToggles = document.querySelectorAll("[data-submenu-toggle]");

    let showSidebar = false;

    function updateNavbarShadow() {
      if (window.scrollY > 0) {
        header?.classList.add("shadow-sm");
      } else {
        header?.classList.remove("shadow-sm");
      }
    }

    function toggleSidebar() {
      showSidebar = !showSidebar;
      if (showSidebar) {
        sidebar?.classList.remove("-translate-x-full");
        sidebarMobile?.classList.remove("-translate-x-full");
        overlay?.classList.remove("hidden");
        menuOpenIcons.forEach((icon) => icon.classList.add("hidden"));
        menuCloseIcons.forEach((icon) => icon.classList.remove("hidden"));
      } else {
        sidebar?.classList.add("-translate-x-full");
        sidebarMobile?.classList.add("-translate-x-full");
        overlay?.classList.add("hidden");
        menuOpenIcons.forEach((icon) => icon.classList.remove("hidden"));
        menuCloseIcons.forEach((icon) => icon.classList.add("hidden"));
      }
    }

    function toggleSubmenu(e: any) {
      const button = e.currentTarget;
      const submenu = button.nextElementSibling;
      const arrow = button.querySelector(".submenu-arrow");

      submenu.classList.toggle("hidden");
      arrow.classList.toggle("active");
    }

    // Event Listeners
    window.addEventListener("scroll", updateNavbarShadow);
    navToggle?.addEventListener("click", toggleSidebar);
    navToggleMobile?.addEventListener("click", toggleSidebar);
    overlay?.addEventListener("click", toggleSidebar);
    closeButton?.addEventListener("click", toggleSidebar);
    closeButtonMobile?.addEventListener("click", toggleSidebar);
    submenuToggles.forEach((toggle) => {
      toggle.addEventListener("click", toggleSubmenu);
    });

    // Cleanup function
    return () => {
      window.removeEventListener("scroll", updateNavbarShadow);
      navToggle?.removeEventListener("click", toggleSidebar);
      navToggleMobile?.removeEventListener("click", toggleSidebar);
      overlay?.removeEventListener("click", toggleSidebar);
      closeButton?.removeEventListener("click", toggleSidebar);
      submenuToggles.forEach((toggle) => {
        toggle.removeEventListener("click", toggleSubmenu);
      });
    };
  }

  // Initialize when the document is loaded
  document.addEventListener("astro:page-load", initializeHeader);
</script>
